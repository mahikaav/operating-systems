// 1) Preemptive SJF

#include<stdio.h>
int main()
{
    int n,sum=0,pos,temp;
    printf("enter number of process: ");
    scanf("%d",&n);
    int bt[n],wt[n],p[n],tt[n];
    printf("\n enter the burst time:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
    }
    for(int i=0;i<n;i++)
    {
        pos=i;
        for(int j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
    wt[0]=0;            
    for(int i=1;i<n;i++)
    {
        wt[i]=0;
        for(int j=0;j<i;j++) wt[i]+=bt[j];
        sum+=wt[i];
    }
    printf("Total waiting time is: %d",sum);
    float awt=sum*1.0/n;      
    sum=0;
    for(int i=0;i<n;i++)
    {
        tt[i]=bt[i]+wt[i];   
        sum+=tt[i];
    }
    printf("\nTotal turnaround time: %d", sum);
    float att=sum*1.0/n;    
    printf("\nAverage waiting Time: %f",awt);
    printf("\nAverage turnaround Time: %f\n",att);
}

// 2) Preemptive Priority Scheduling

#include<stdio.h>
 
int main()
{
    int total=0,pos,temp,n;
    float awt, att;
    printf("Enter total number of processes: ");
    scanf("%d",&n);
    int bt[n],p[n], wt[n], tt[n], pr[n];
    printf("\nEnter burst time: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
    }
    printf("\nEnter Priority: ");
    for (int i=0;i<n;i++){
        scanf("%d",&pr[i]);
    }
    
    for(int i=0;i<n;i++)
    {
        pos=i;
        for(int j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }
 
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
 
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
 
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
 
    wt[0]=0;
    for(int i=1;i<n;i++)
    {
        wt[i]=0;
        for(int j=0;j<i;j++)
            wt[i]+=bt[j];
 
        total+=wt[i];
    }
    printf("\nTotal waiting time: %d",total);
    awt=1.0*total/n;
    printf("\nAverage waiting time: %f",awt);
    total=0;
    for(int i=0;i<n;i++)
    {
        tt[i]=bt[i]+wt[i];
        total+=tt[i];
    }
    printf("\nTotal turnaround time: %d",total);
    att=1.0*total/n;
    printf("\nAverage turnaround time: %f",att);
    return 0;
}

// Q) round robin scheduling 
#include<stdio.h>
int main()
{
    int  n;
    printf("Enter Total Number of Processes: ");
    scanf("%d", &n);
    int wt=0,tt=0,at[n],bt[n],tempbt[n];
    int x = n;
    for (int i=0;i<n;i++){
	at[i] = 0;
    }
    printf("Burst Time: ");
    for(int i = 0; i < n; i++)
    {
        scanf("%d", &bt[i]);
        tempbt[i] = bt[i];
    }

    int tq;
    printf("Enter time quantum: ");
    scanf("%d", &tq);
    int total = 0,  counter = 0,i;
    for(total=0, i = 0; x!=0; )  
    {  
        if(tempbt[i] <= tq&& tempbt[i] > 0)    
        {  
            total = total + tempbt[i];  
            tempbt[i] = 0;  
            counter=1;  
        }    
        else if(tempbt[i] > 0)  
        {  
            tempbt[i] = tempbt[i] -tq;  
            total  +=tq;    
        }  
        if(tempbt[i]==0 && counter==1)  
        {  
            x--;  
            wt=wt+total-at[i]-bt[i];  
            tt+=total-at[i];  
            counter =0;    
        }  
        if(i==n-1)  
        {  
            i=0;  
        }  
        else if(at[i+1]<=total)  
        {  
            i++;  
        }  
        else  
        {  
            i=0;  
        }  
    }  
    printf("\nTotal waiting time: %d",wt);
    printf("\nTotal turnaround time: %d", tt);
    float awt = wt * 1.0 / n;
    float att = tt * 1.0 / n;
    printf("\nAverage waiting time:%f", awt);
    printf("\nAverage turnaround time:%f\n", att);
    return 0;
}
