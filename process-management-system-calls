// Q) Use fork() system call, print pid, ppid without using wait()
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid;
    int x = 5;
    pid = fork();
    x++;

    if (pid < 0) {
        printf("Child process could not be created");
        exit(-1);
    } 
    else if (pid == 0) {
        printf("Child process has been created\n");
        printf("Process ID of child = %d\n", getpid());
        printf("Value of x = %d\n", x);
        printf("Process ID of parent = %d\n", getppid());
    } 
    else {
        printf("This is the parent process\n");
        printf("Process ID = %d\n", getpid());
        printf("Value of x = %d\n", x);
        printf("Process ID of shell is = %d\n", getppid());
    }

    return 0;
}

// Q) Use wait() system call

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int i, status;
    pid_t pid;
    pid = fork();
    
    if (pid < 0) {
        printf("Process could not be created\n");
        exit(-1);
    } 
    else if (pid > 0) {
        wait(NULL);
        printf("Parent process started:\n");
        printf("Even numbers: \n");
        for (int i = 2; i <= 10; i = i + 2) {
            printf("%d ", i);
        }
        printf("\n");
        printf("Parent process ended\n");
    } 
    else {
        if (pid == 0) {
            printf("Child starts\n");
            printf("Odd numbers: \n");
            for (int i = 1; i < 10; i = i + 2) {
                printf("%d ", i);
            }
            printf("\nChild ends\n");
        }
    }
    
    return 0;
}

// Q) Use execl() system call using switch statement
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid;
    
    switch (pid = fork()) {
        case -1:
            perror("fork failed");
            exit(-1);
        case 0:
            printf("Child process\n");
            execl("/bin/date", "date", 0);
            exit(0);
        default:
            wait(NULL);
            printf("Child terminated\n");
            exit(0);
    }
}

//Q) Stat() system call
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) {
    struct stat file;
    int n;

    if (argc != 2) {
        printf("Usage: ./a.out <filename>\n");
        exit(-1);
    }

    if ((n = stat(argv[1], &file)) == -1) {
        perror(argv[1]);
        exit(-1);
    }

    printf("User ID = %d\n", file.st_uid);
    printf("Group ID = %d\n", file.st_gid);
    printf("Block size = %d\n", file.st_blksize);
    printf("Inode no. = %llu\n", file.st_ino);
    printf("Last accessed = %s\n", ctime(&(file.st_atime)));
    printf("Last modified = %s\n", ctime(&(file.st_mtime)));
    printf("File size = %lld bytes\n", file.st_size);
    printf("Number of links = %d\n", file.st_nlink);
    printf("Permissions: \n");
    printf((S_ISDIR(file.st_mode)) ? "d" : "-");
    printf((file.st_mode & S_IRUSR) ? "r" : "-");
    printf((file.st_mode & S_IWUSR) ? "w" : "-");
    printf((file.st_mode & S_IXUSR) ? "x" : "-");
    printf((file.st_mode & S_IRGRP) ? "r" : "-");
    printf((file.st_mode & S_IWGRP) ? "w" : "-");
    printf((file.st_mode & S_IXGRP) ? "x" : "-");
    printf((file.st_mode & S_IROTH) ? "r" : "-");
    printf((file.st_mode & S_IWOTH) ? "w" : "-");
    printf((file.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n");

    if (file.st_mode & S_IFREG) {
        printf("File type: Regular \n");
    }
    
    if (file.st_mode & S_IFDIR) {
        printf("File type: Directory \n");
    }

    return 0;
}
